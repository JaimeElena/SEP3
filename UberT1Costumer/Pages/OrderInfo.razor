@page "/OrderInfo"
@using UberT1Costumer.Data
@using UberT1Costumer.Models
@using UberT1Costumer.Authentication
@using System.Device.Location

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IOrderingService OrderingService

<h3>OrderInfo</h3>
<AuthorizeView>
    <NotAuthorized>
        <h3>You need to login before access!</h3>
    </NotAuthorized>
    <Authorized Context="menu">
        @if (showMenu)
        {
            <EditForm model="destination" OnValidSubmit="RequestVehicle">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div>
                    Destination:<br/>
                    <InputTextArea @bind-Value="destination.streetname"/>
                </div>
                <button type="submit">Request vehicle</button>
            </EditForm>
            <button @onclick="@ShowOrder">Show order</button>
        }
        
        @if (showCheck)
        {
            <div class="form-group">
                <label>@message</label>
            </div>
            <button @onclick="@CheckAccept">Check</button>
            <button @onclick="@CancelRequest">Cancel</button>
        }
        
        @if (showOrder)
        {
            @if (order == null)
            {
                <p><em>No requests exist now</em></p>
            }
            else if (order != null)
            {
                <div class="form-group">
                    Status:<br/>
                    <label>@status</label>
                </div>
                <div class="form-group">
                    Driver username:<br/>
                    <label>@driverusername</label>
                </div>
                <div class="form-group">
                    Driver first name:<br/>
                    <label>@driverfirstname</label>
                </div>
                <div class="form-group">
                    Driver last name:<br/>
                    <label>@driversecondname</label>
                </div>
                <div class="form-group">
                    Your Location:<br/>
                    <label>@customerstreetname</label>
                </div>
                <div class="form-group">
                    Destination:<br/>
                    <label>@destinationstreetname</label>
                </div>
                <div class="form-group">
                    Distance:<br/>
                    <label>@distance</label>
                </div>
                <div class="form-group">
                    Estimate time:<br/>
                    <label>@estimatetime</label>
                </div>
                <div class="form-group">
                    Price:<br/>
                    <label>@price</label>
                </div>
                <div class="form-group">
                    <label>@message</label>
                </div>
                <button @onclick="@CheckFinished">Check</button>
            }
        }
        @if (showFinished)
        {
            <div class="form-group">
                <label>Hope you have enjoyed your trip!</label>
            </div>
            <button @onclick="@Back">Back to menu</button>
        }
    </Authorized>
</AuthorizeView>
@code {
    private string destinationstreetname;
    private string status;
    private string driverfirstname;
    private string driversecondname;
    private string customerstreetname;
    private string estimatetime;
    private string price;
    private Location destination = new Location();
    private Order order = new Order();
    private bool showMenu = true;
    private bool showCheck;
    private bool showOrder;
    private bool showFinished;
    private string message = "";
    private Location customerlocation;
    private Costumer costumer;
    private string distance;
    private string driverusername;

    public async Task RequestVehicle()
    {
        order.destinationStreetName = destination.streetname;
        order.customerLocation = GetLocation();
        costumer = ((UserAuthenticationStateProvider) AuthenticationStateProvider).GetUser();
        order.costumer = costumer;
        if (order.customerLocation != null)
        {
            order = await OrderingService.RequestVehicle(order);
            status = order.status;
            showMenu = false;
            showCheck = true;
        }
    }

    public async Task CancelRequest()
    {
        message = await OrderingService.CancelRequest(order);
        if (message == "Cancelled")
        {
            order = new Order();
            showCheck = false;
            showMenu = true;
        }
        else
        {
            message = "Can't cancel this order";
        }
    }

    public async Task CheckAccept()
    {
        order = await OrderingService.CheckProcess(order);
        if (order.status == "accepted")
        {
            status = order.status;
            driverfirstname = order.driver.firstname;
            driversecondname = order.driver.lastname;
            customerstreetname = order.customerLocation.streetname;
            estimatetime = order.estimateTime;
            price = order.price;
            destinationstreetname = order.destinationStreetName;
            distance = order.distance;
            driverusername = order.driver.username;
            message = "Order accepted!";
            showCheck = false;
            showOrder = true;
        }
    }

    public async Task CheckFinished()
    {
        order = await OrderingService.CheckProcess(order);
        if (order.status == "completed")
        {
            message = "Order completed!";
            showOrder = false;
        }
    }

    public async Task ShowOrder()
    {
        order = OrderingService.GetOrder();
        if (order.status != null)
        {
            status = order.status;
            driverfirstname = order.driver.firstname;
            driversecondname = order.driver.lastname;
            customerstreetname = order.customerLocation.streetname;
            estimatetime = order.estimateTime;
            price = order.price;
            destinationstreetname = order.destinationStreetName;
            distance = order.distance;
            driverusername = order.driver.username;
            showMenu = false;
            showOrder = true;
        }
    }

    public void Back()
    {
        showOrder = false;
        showMenu = true;
    }

    public Location GetLocation()
    {
        Console.WriteLine("Im here");
        GeoCoordinateWatcher watcher = new GeoCoordinateWatcher();
        watcher.TryStart(false, TimeSpan.FromMilliseconds(1000));
        GeoPosition<GeoCoordinate> GC = new GeoPosition<GeoCoordinate>();
        GC = watcher.Position;

        double latitude = GC.Location.Latitude;
        double longitude = GC.Location.Longitude;

        Console.WriteLine(latitude + " " + longitude);
        
        if (watcher.Position.Location.IsUnknown)
        {
            Console.WriteLine("Unknown");
            return null;
        }
        else
        {
            return new Location(latitude, longitude);
        }
    }

}