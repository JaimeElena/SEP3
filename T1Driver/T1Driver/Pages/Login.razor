@page "/login"
@using T1Driver.Models
@using T1Driver.Data
@using System.Threading
@using T1Driver.Authentication

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<AuthorizeView>
    <NotAuthorized>
        @if (showLogin)
        {
            <h3>Login</h3>
            <div id="logIn">
                <div >Username </div> <input type="text" placeholder="username" @bind-value="username"/>
                <div id="password"> Password </div> <input type="password" placeholder="password" @bind-value="password"/>
                <div>
                    <button id="logButt" @onclick="PerformLogin"> Log in </button>
                    <button id="registerButt" @onclick="ShowRegister"> Sign Up</button>
                </div>
                @if (showMessage)
                {
                    <div style="color:red">@message</div>
                }
            </div>
                }
        @if (showRegister)
                {
                    <EditForm Model="CurrentUser" OnValidSubmit="PerformRegister" Context="register">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>
                        <div class="form-group">
                            Username:<br/>
                            <InputTextArea @bind-Value="CurrentUser.username"/>
                        </div>
                        <div class="form-group">
                            Password:<br/>
                            <InputTextArea @bind-Value="CurrentUser.password"/>
                        </div>
                        <div class="form-group">
                            First Name:<br/>
                            <InputTextArea @bind-Value="CurrentUser.firstname"/>
                        </div>
                        <div class="form-group">
                            Last Name:<br/>
                            <InputTextArea @bind-Value="CurrentUser.secondname"/>
                        </div>
                        <div class="form-group">
                            Number plate:<br/>
                            <InputTextArea @bind-Value="CurrentUser.numberPlate"/>
                        </div>
                        <div class="form-group">
                            Birthday:<br/>
                            <InputTextArea @bind-Value="CurrentUser.birthday"/>
                        </div>
                        <div class="form-group"> Gender:
                            <select class="form-control selectpicker" @onchange="arg => ChangeGender(arg)">
                                <option>Choose your gender</option>
                                <option>Male</option>
                                <option>Female</option>
                            </select>
                        </div>
                        @if (showMessage)
                        {
                            <div style="color:red">@message</div>
                        }
                        <p class="actions">
                            <button class="btn btn-outline-dark" type="submit">Save</button>
                        </p>
                        <button class="btn btn-outline-dark" @onclick="HideRegister">Cancel</button>
                    </EditForm>
                }
    </NotAuthorized>
    <Authorized>
        <h3>You are signed in!</h3>
        <button id="logoutButt" @onclick="PerformLogout"> Log out</button>
    </Authorized>
</AuthorizeView>

@code {
    private Driver CurrentUser = new Driver();

    private string message;
    private string username;
    private string password;
    private bool showLogin = true;
    private bool showRegister;
    private bool showMessage;
    
    IUserServices client = new UserServices();

    public async Task PerformLogin()
    {
        message = "";
        try
        {
            if (username == "" || password == "")
            {
                message = "Username or password is incorrect!";
                ShowMessage();
            }
            await ((UserAuthenticationStateProvider)AuthenticationStateProvider).ValidateLogin(username, password);
            message = "Login succeed!";
            ShowMessage();
            await Task.Delay(1000);
            NavigationManager.NavigateTo("/profile");
        }
        catch (Exception e)
        {
            message = "Username or password is incorrect!";
            ShowMessage();
            Console.WriteLine(e);
        }
    }

    public async Task PerformLogout()
    {
        message = "";
        username = "";
        password = "";
        CurrentUser = null;
        try
        {
            await ((UserAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            message = "Logout succeed!";
            ShowMessage();
            await Task.Delay(1000);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            message = e.Message;
        }
    }

    public async Task PerformRegister()
    {
        if (CurrentUser.username == "" || CurrentUser.password == "" || CurrentUser.firstname == "" || CurrentUser.secondname == "" || CurrentUser.birthday == "" || CurrentUser.sex == null)
        {
            message = "You should fill up all your information!";
            ShowMessage();
        }
        else
        {
            string response = await client.Register(CurrentUser);
            if(response.Equals("200"))
            {
                Console.WriteLine("Register was successful");
            }
            HideRegister();
            message = "Register was successful";
            ShowMessage();
        }
    }

    public void ShowRegister()
    {
        showLogin = false;
        showRegister = true;
    }

    public void HideRegister()
    {
        showRegister = false;
        showLogin = true;
    }
    
    private void ChangeGender(ChangeEventArgs args)
    {
        CurrentUser.sex = null;
        try
        {
            CurrentUser.sex = args.Value.ToString();
        }
        catch (Exception e){}
    }

    private void ShowMessage()
    {
        showMessage = true;
    }
}